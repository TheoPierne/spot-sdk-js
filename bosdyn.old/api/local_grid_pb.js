// source: bosdyn/api/local_grid.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bosdyn_api_geometry_pb = require('../../bosdyn/api/geometry_pb.js');
goog.object.extend(proto, bosdyn_api_geometry_pb);
var bosdyn_api_header_pb = require('../../bosdyn/api/header_pb.js');
goog.object.extend(proto, bosdyn_api_header_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.bosdyn.api.GetLocalGridTypesRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.GetLocalGridTypesResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.GetLocalGridsRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.GetLocalGridsResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGrid', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGrid.CellFormat', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGrid.Encoding', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGridExtent', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGridRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGridResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGridResponse.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.LocalGridType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.LocalGridType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.LocalGridType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.LocalGridType.displayName = 'proto.bosdyn.api.LocalGridType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.LocalGridRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.LocalGridRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.LocalGridRequest.displayName = 'proto.bosdyn.api.LocalGridRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.LocalGridExtent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.LocalGridExtent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.LocalGridExtent.displayName = 'proto.bosdyn.api.LocalGridExtent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.LocalGrid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.LocalGrid.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.LocalGrid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.LocalGrid.displayName = 'proto.bosdyn.api.LocalGrid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.LocalGridResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.LocalGridResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.LocalGridResponse.displayName = 'proto.bosdyn.api.LocalGridResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.GetLocalGridTypesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.GetLocalGridTypesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.GetLocalGridTypesRequest.displayName = 'proto.bosdyn.api.GetLocalGridTypesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.GetLocalGridTypesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.GetLocalGridTypesResponse.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.GetLocalGridTypesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.GetLocalGridTypesResponse.displayName = 'proto.bosdyn.api.GetLocalGridTypesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.GetLocalGridsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.GetLocalGridsRequest.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.GetLocalGridsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.GetLocalGridsRequest.displayName = 'proto.bosdyn.api.GetLocalGridsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.GetLocalGridsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.GetLocalGridsResponse.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.GetLocalGridsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.GetLocalGridsResponse.displayName = 'proto.bosdyn.api.GetLocalGridsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.LocalGridType.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.LocalGridType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.LocalGridType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridType.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.LocalGridType}
 */
proto.bosdyn.api.LocalGridType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.LocalGridType;
  return proto.bosdyn.api.LocalGridType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.LocalGridType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.LocalGridType}
 */
proto.bosdyn.api.LocalGridType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.LocalGridType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.LocalGridType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.LocalGridType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bosdyn.api.LocalGridType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.LocalGridType} returns this
 */
proto.bosdyn.api.LocalGridType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.LocalGridRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.LocalGridRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.LocalGridRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    localGridTypeName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.LocalGridRequest}
 */
proto.bosdyn.api.LocalGridRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.LocalGridRequest;
  return proto.bosdyn.api.LocalGridRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.LocalGridRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.LocalGridRequest}
 */
proto.bosdyn.api.LocalGridRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalGridTypeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.LocalGridRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.LocalGridRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.LocalGridRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalGridTypeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string local_grid_type_name = 1;
 * @return {string}
 */
proto.bosdyn.api.LocalGridRequest.prototype.getLocalGridTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.LocalGridRequest} returns this
 */
proto.bosdyn.api.LocalGridRequest.prototype.setLocalGridTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.LocalGridExtent.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.LocalGridExtent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.LocalGridExtent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridExtent.toObject = function(includeInstance, msg) {
  var f, obj = {
    cellSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    numCellsX: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numCellsY: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.LocalGridExtent}
 */
proto.bosdyn.api.LocalGridExtent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.LocalGridExtent;
  return proto.bosdyn.api.LocalGridExtent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.LocalGridExtent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.LocalGridExtent}
 */
proto.bosdyn.api.LocalGridExtent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCellSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumCellsX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumCellsY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.LocalGridExtent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.LocalGridExtent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.LocalGridExtent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridExtent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellSize();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getNumCellsX();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNumCellsY();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional double cell_size = 2;
 * @return {number}
 */
proto.bosdyn.api.LocalGridExtent.prototype.getCellSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.LocalGridExtent} returns this
 */
proto.bosdyn.api.LocalGridExtent.prototype.setCellSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 num_cells_x = 3;
 * @return {number}
 */
proto.bosdyn.api.LocalGridExtent.prototype.getNumCellsX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.LocalGridExtent} returns this
 */
proto.bosdyn.api.LocalGridExtent.prototype.setNumCellsX = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 num_cells_y = 4;
 * @return {number}
 */
proto.bosdyn.api.LocalGridExtent.prototype.getNumCellsY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.LocalGridExtent} returns this
 */
proto.bosdyn.api.LocalGridExtent.prototype.setNumCellsY = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.LocalGrid.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.LocalGrid.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.LocalGrid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.LocalGrid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGrid.toObject = function(includeInstance, msg) {
  var f, obj = {
    localGridTypeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    acquisitionTime: (f = msg.getAcquisitionTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    transformsSnapshot: (f = msg.getTransformsSnapshot()) && bosdyn_api_geometry_pb.FrameTreeSnapshot.toObject(includeInstance, f),
    frameNameLocalGridData: jspb.Message.getFieldWithDefault(msg, 11, ""),
    extent: (f = msg.getExtent()) && proto.bosdyn.api.LocalGridExtent.toObject(includeInstance, f),
    cellFormat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    encoding: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    rleCountsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    cellValueScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    cellValueOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.LocalGrid}
 */
proto.bosdyn.api.LocalGrid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.LocalGrid;
  return proto.bosdyn.api.LocalGrid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.LocalGrid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.LocalGrid}
 */
proto.bosdyn.api.LocalGrid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalGridTypeName(value);
      break;
    case 30:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAcquisitionTime(value);
      break;
    case 31:
      var value = new bosdyn_api_geometry_pb.FrameTreeSnapshot;
      reader.readMessage(value,bosdyn_api_geometry_pb.FrameTreeSnapshot.deserializeBinaryFromReader);
      msg.setTransformsSnapshot(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameNameLocalGridData(value);
      break;
    case 3:
      var value = new proto.bosdyn.api.LocalGridExtent;
      reader.readMessage(value,proto.bosdyn.api.LocalGridExtent.deserializeBinaryFromReader);
      msg.setExtent(value);
      break;
    case 4:
      var value = /** @type {!proto.bosdyn.api.LocalGrid.CellFormat} */ (reader.readEnum());
      msg.setCellFormat(value);
      break;
    case 5:
      var value = /** @type {!proto.bosdyn.api.LocalGrid.Encoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRleCounts(values[i]);
      }
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCellValueScale(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCellValueOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.LocalGrid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.LocalGrid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.LocalGrid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGrid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalGridTypeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAcquisitionTime();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTransformsSnapshot();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      bosdyn_api_geometry_pb.FrameTreeSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getFrameNameLocalGridData();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getExtent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bosdyn.api.LocalGridExtent.serializeBinaryToWriter
    );
  }
  f = message.getCellFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getRleCountsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getCellValueScale();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getCellValueOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.LocalGrid.CellFormat = {
  CELL_FORMAT_UNKNOWN: 0,
  CELL_FORMAT_FLOAT32: 1,
  CELL_FORMAT_FLOAT64: 2,
  CELL_FORMAT_INT8: 3,
  CELL_FORMAT_UINT8: 4,
  CELL_FORMAT_INT16: 5,
  CELL_FORMAT_UINT16: 6
};

/**
 * @enum {number}
 */
proto.bosdyn.api.LocalGrid.Encoding = {
  ENCODING_UNKNOWN: 0,
  ENCODING_RAW: 1,
  ENCODING_RLE: 2
};

/**
 * optional string local_grid_type_name = 1;
 * @return {string}
 */
proto.bosdyn.api.LocalGrid.prototype.getLocalGridTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setLocalGridTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp acquisition_time = 30;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.bosdyn.api.LocalGrid.prototype.getAcquisitionTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 30));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
*/
proto.bosdyn.api.LocalGrid.prototype.setAcquisitionTime = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.clearAcquisitionTime = function() {
  return this.setAcquisitionTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.LocalGrid.prototype.hasAcquisitionTime = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional FrameTreeSnapshot transforms_snapshot = 31;
 * @return {?proto.bosdyn.api.FrameTreeSnapshot}
 */
proto.bosdyn.api.LocalGrid.prototype.getTransformsSnapshot = function() {
  return /** @type{?proto.bosdyn.api.FrameTreeSnapshot} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.FrameTreeSnapshot, 31));
};


/**
 * @param {?proto.bosdyn.api.FrameTreeSnapshot|undefined} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
*/
proto.bosdyn.api.LocalGrid.prototype.setTransformsSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 31, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.clearTransformsSnapshot = function() {
  return this.setTransformsSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.LocalGrid.prototype.hasTransformsSnapshot = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional string frame_name_local_grid_data = 11;
 * @return {string}
 */
proto.bosdyn.api.LocalGrid.prototype.getFrameNameLocalGridData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setFrameNameLocalGridData = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional LocalGridExtent extent = 3;
 * @return {?proto.bosdyn.api.LocalGridExtent}
 */
proto.bosdyn.api.LocalGrid.prototype.getExtent = function() {
  return /** @type{?proto.bosdyn.api.LocalGridExtent} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.LocalGridExtent, 3));
};


/**
 * @param {?proto.bosdyn.api.LocalGridExtent|undefined} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
*/
proto.bosdyn.api.LocalGrid.prototype.setExtent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.clearExtent = function() {
  return this.setExtent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.LocalGrid.prototype.hasExtent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CellFormat cell_format = 4;
 * @return {!proto.bosdyn.api.LocalGrid.CellFormat}
 */
proto.bosdyn.api.LocalGrid.prototype.getCellFormat = function() {
  return /** @type {!proto.bosdyn.api.LocalGrid.CellFormat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.bosdyn.api.LocalGrid.CellFormat} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setCellFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Encoding encoding = 5;
 * @return {!proto.bosdyn.api.LocalGrid.Encoding}
 */
proto.bosdyn.api.LocalGrid.prototype.getEncoding = function() {
  return /** @type {!proto.bosdyn.api.LocalGrid.Encoding} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.bosdyn.api.LocalGrid.Encoding} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.bosdyn.api.LocalGrid.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.bosdyn.api.LocalGrid.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.bosdyn.api.LocalGrid.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated int32 rle_counts = 7;
 * @return {!Array<number>}
 */
proto.bosdyn.api.LocalGrid.prototype.getRleCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setRleCountsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.addRleCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.clearRleCountsList = function() {
  return this.setRleCountsList([]);
};


/**
 * optional double cell_value_scale = 8;
 * @return {number}
 */
proto.bosdyn.api.LocalGrid.prototype.getCellValueScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setCellValueScale = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double cell_value_offset = 9;
 * @return {number}
 */
proto.bosdyn.api.LocalGrid.prototype.getCellValueOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.LocalGrid} returns this
 */
proto.bosdyn.api.LocalGrid.prototype.setCellValueOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.LocalGridResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.LocalGridResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.LocalGridResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    localGridTypeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    localGrid: (f = msg.getLocalGrid()) && proto.bosdyn.api.LocalGrid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.LocalGridResponse}
 */
proto.bosdyn.api.LocalGridResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.LocalGridResponse;
  return proto.bosdyn.api.LocalGridResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.LocalGridResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.LocalGridResponse}
 */
proto.bosdyn.api.LocalGridResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalGridTypeName(value);
      break;
    case 2:
      var value = /** @type {!proto.bosdyn.api.LocalGridResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.bosdyn.api.LocalGrid;
      reader.readMessage(value,proto.bosdyn.api.LocalGrid.deserializeBinaryFromReader);
      msg.setLocalGrid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.LocalGridResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.LocalGridResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.LocalGridResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.LocalGridResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalGridTypeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLocalGrid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bosdyn.api.LocalGrid.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.LocalGridResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_NO_SUCH_GRID: 2,
  STATUS_DATA_UNAVAILABLE: 3,
  STATUS_DATA_INVALID: 4
};

/**
 * optional string local_grid_type_name = 1;
 * @return {string}
 */
proto.bosdyn.api.LocalGridResponse.prototype.getLocalGridTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.LocalGridResponse} returns this
 */
proto.bosdyn.api.LocalGridResponse.prototype.setLocalGridTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.LocalGridResponse.Status}
 */
proto.bosdyn.api.LocalGridResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.LocalGridResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.LocalGridResponse.Status} value
 * @return {!proto.bosdyn.api.LocalGridResponse} returns this
 */
proto.bosdyn.api.LocalGridResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional LocalGrid local_grid = 3;
 * @return {?proto.bosdyn.api.LocalGrid}
 */
proto.bosdyn.api.LocalGridResponse.prototype.getLocalGrid = function() {
  return /** @type{?proto.bosdyn.api.LocalGrid} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.LocalGrid, 3));
};


/**
 * @param {?proto.bosdyn.api.LocalGrid|undefined} value
 * @return {!proto.bosdyn.api.LocalGridResponse} returns this
*/
proto.bosdyn.api.LocalGridResponse.prototype.setLocalGrid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.LocalGridResponse} returns this
 */
proto.bosdyn.api.LocalGridResponse.prototype.clearLocalGrid = function() {
  return this.setLocalGrid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.LocalGridResponse.prototype.hasLocalGrid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.GetLocalGridTypesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.GetLocalGridTypesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.GetLocalGridTypesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridTypesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.GetLocalGridTypesRequest}
 */
proto.bosdyn.api.GetLocalGridTypesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.GetLocalGridTypesRequest;
  return proto.bosdyn.api.GetLocalGridTypesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.GetLocalGridTypesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.GetLocalGridTypesRequest}
 */
proto.bosdyn.api.GetLocalGridTypesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.GetLocalGridTypesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.GetLocalGridTypesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.GetLocalGridTypesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridTypesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.GetLocalGridTypesRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.GetLocalGridTypesRequest} returns this
*/
proto.bosdyn.api.GetLocalGridTypesRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.GetLocalGridTypesRequest} returns this
 */
proto.bosdyn.api.GetLocalGridTypesRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.GetLocalGridTypesRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.GetLocalGridTypesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.GetLocalGridTypesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.GetLocalGridTypesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridTypesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    localGridTypeList: jspb.Message.toObjectList(msg.getLocalGridTypeList(),
    proto.bosdyn.api.LocalGridType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.GetLocalGridTypesResponse}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.GetLocalGridTypesResponse;
  return proto.bosdyn.api.GetLocalGridTypesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.GetLocalGridTypesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.GetLocalGridTypesResponse}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.bosdyn.api.LocalGridType;
      reader.readMessage(value,proto.bosdyn.api.LocalGridType.deserializeBinaryFromReader);
      msg.addLocalGridType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.GetLocalGridTypesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.GetLocalGridTypesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridTypesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getLocalGridTypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bosdyn.api.LocalGridType.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.GetLocalGridTypesResponse} returns this
*/
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.GetLocalGridTypesResponse} returns this
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LocalGridType local_grid_type = 2;
 * @return {!Array<!proto.bosdyn.api.LocalGridType>}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.getLocalGridTypeList = function() {
  return /** @type{!Array<!proto.bosdyn.api.LocalGridType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bosdyn.api.LocalGridType, 2));
};


/**
 * @param {!Array<!proto.bosdyn.api.LocalGridType>} value
 * @return {!proto.bosdyn.api.GetLocalGridTypesResponse} returns this
*/
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.setLocalGridTypeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bosdyn.api.LocalGridType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.LocalGridType}
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.addLocalGridType = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bosdyn.api.LocalGridType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.GetLocalGridTypesResponse} returns this
 */
proto.bosdyn.api.GetLocalGridTypesResponse.prototype.clearLocalGridTypeList = function() {
  return this.setLocalGridTypeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.GetLocalGridsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.GetLocalGridsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.GetLocalGridsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    localGridRequestsList: jspb.Message.toObjectList(msg.getLocalGridRequestsList(),
    proto.bosdyn.api.LocalGridRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.GetLocalGridsRequest}
 */
proto.bosdyn.api.GetLocalGridsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.GetLocalGridsRequest;
  return proto.bosdyn.api.GetLocalGridsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.GetLocalGridsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.GetLocalGridsRequest}
 */
proto.bosdyn.api.GetLocalGridsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.bosdyn.api.LocalGridRequest;
      reader.readMessage(value,proto.bosdyn.api.LocalGridRequest.deserializeBinaryFromReader);
      msg.addLocalGridRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.GetLocalGridsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.GetLocalGridsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getLocalGridRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bosdyn.api.LocalGridRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.GetLocalGridsRequest} returns this
*/
proto.bosdyn.api.GetLocalGridsRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.GetLocalGridsRequest} returns this
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LocalGridRequest local_grid_requests = 2;
 * @return {!Array<!proto.bosdyn.api.LocalGridRequest>}
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.getLocalGridRequestsList = function() {
  return /** @type{!Array<!proto.bosdyn.api.LocalGridRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bosdyn.api.LocalGridRequest, 2));
};


/**
 * @param {!Array<!proto.bosdyn.api.LocalGridRequest>} value
 * @return {!proto.bosdyn.api.GetLocalGridsRequest} returns this
*/
proto.bosdyn.api.GetLocalGridsRequest.prototype.setLocalGridRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bosdyn.api.LocalGridRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.LocalGridRequest}
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.addLocalGridRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bosdyn.api.LocalGridRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.GetLocalGridsRequest} returns this
 */
proto.bosdyn.api.GetLocalGridsRequest.prototype.clearLocalGridRequestsList = function() {
  return this.setLocalGridRequestsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.GetLocalGridsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.GetLocalGridsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.GetLocalGridsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    localGridResponsesList: jspb.Message.toObjectList(msg.getLocalGridResponsesList(),
    proto.bosdyn.api.LocalGridResponse.toObject, includeInstance),
    numLocalGridErrors: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.GetLocalGridsResponse}
 */
proto.bosdyn.api.GetLocalGridsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.GetLocalGridsResponse;
  return proto.bosdyn.api.GetLocalGridsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.GetLocalGridsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.GetLocalGridsResponse}
 */
proto.bosdyn.api.GetLocalGridsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.bosdyn.api.LocalGridResponse;
      reader.readMessage(value,proto.bosdyn.api.LocalGridResponse.deserializeBinaryFromReader);
      msg.addLocalGridResponses(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumLocalGridErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.GetLocalGridsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.GetLocalGridsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.GetLocalGridsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getLocalGridResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bosdyn.api.LocalGridResponse.serializeBinaryToWriter
    );
  }
  f = message.getNumLocalGridErrors();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.GetLocalGridsResponse} returns this
*/
proto.bosdyn.api.GetLocalGridsResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.GetLocalGridsResponse} returns this
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LocalGridResponse local_grid_responses = 2;
 * @return {!Array<!proto.bosdyn.api.LocalGridResponse>}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.getLocalGridResponsesList = function() {
  return /** @type{!Array<!proto.bosdyn.api.LocalGridResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bosdyn.api.LocalGridResponse, 2));
};


/**
 * @param {!Array<!proto.bosdyn.api.LocalGridResponse>} value
 * @return {!proto.bosdyn.api.GetLocalGridsResponse} returns this
*/
proto.bosdyn.api.GetLocalGridsResponse.prototype.setLocalGridResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bosdyn.api.LocalGridResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.LocalGridResponse}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.addLocalGridResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bosdyn.api.LocalGridResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.GetLocalGridsResponse} returns this
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.clearLocalGridResponsesList = function() {
  return this.setLocalGridResponsesList([]);
};


/**
 * optional int32 num_local_grid_errors = 3;
 * @return {number}
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.getNumLocalGridErrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.GetLocalGridsResponse} returns this
 */
proto.bosdyn.api.GetLocalGridsResponse.prototype.setNumLocalGridErrors = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.bosdyn.api);
