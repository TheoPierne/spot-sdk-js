// source: bosdyn/api/spot/spot_check.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bosdyn_api_header_pb = require('../../../bosdyn/api/header_pb.js');
goog.object.extend(proto, bosdyn_api_header_pb);
var bosdyn_api_lease_pb = require('../../../bosdyn/api/lease_pb.js');
goog.object.extend(proto, bosdyn_api_lease_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.bosdyn.api.spot.CameraCalibrationCommandRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.CameraCalibrationCommandRequest.Command', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.CameraCalibrationCommandResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.DepthPlaneSpotCheckResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.FootHeightCheckResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.FootHeightCheckResult.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.HipRangeOfMotionResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.HipRangeOfMotionResult.Error', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.JointKinematicCheckResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.JointKinematicCheckResult.Error', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.LegPairCheckResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.LegPairCheckResult.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.LoadCellSpotCheckResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.LoadCellSpotCheckResult.Error', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.PayloadCheckResult', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.PayloadCheckResult.Error', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckCommandRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckCommandRequest.Command', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckCommandResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckCommandResponse.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckFeedbackRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckFeedbackResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckFeedbackResponse.Error', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.SpotCheckFeedbackResponse.State', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.SpotCheckCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.SpotCheckCommandRequest.displayName = 'proto.bosdyn.api.spot.SpotCheckCommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.SpotCheckCommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.SpotCheckCommandResponse.displayName = 'proto.bosdyn.api.spot.SpotCheckCommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.SpotCheckFeedbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.SpotCheckFeedbackRequest.displayName = 'proto.bosdyn.api.spot.SpotCheckFeedbackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.SpotCheckFeedbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.SpotCheckFeedbackResponse.displayName = 'proto.bosdyn.api.spot.SpotCheckFeedbackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.DepthPlaneSpotCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.displayName = 'proto.bosdyn.api.spot.DepthPlaneSpotCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.PayloadCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.PayloadCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.PayloadCheckResult.displayName = 'proto.bosdyn.api.spot.PayloadCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.LoadCellSpotCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.LoadCellSpotCheckResult.displayName = 'proto.bosdyn.api.spot.LoadCellSpotCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.JointKinematicCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.JointKinematicCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.JointKinematicCheckResult.displayName = 'proto.bosdyn.api.spot.JointKinematicCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.FootHeightCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.FootHeightCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.FootHeightCheckResult.displayName = 'proto.bosdyn.api.spot.FootHeightCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.LegPairCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.LegPairCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.LegPairCheckResult.displayName = 'proto.bosdyn.api.spot.LegPairCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.spot.HipRangeOfMotionResult.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.spot.HipRangeOfMotionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.HipRangeOfMotionResult.displayName = 'proto.bosdyn.api.spot.HipRangeOfMotionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.CameraCalibrationCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.CameraCalibrationCommandRequest.displayName = 'proto.bosdyn.api.spot.CameraCalibrationCommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.CameraCalibrationCommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.CameraCalibrationCommandResponse.displayName = 'proto.bosdyn.api.spot.CameraCalibrationCommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.displayName = 'proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.displayName = 'proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.SpotCheckCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    lease: (f = msg.getLease()) && bosdyn_api_lease_pb.Lease.toObject(includeInstance, f),
    command: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.SpotCheckCommandRequest;
  return proto.bosdyn.api.spot.SpotCheckCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new bosdyn_api_lease_pb.Lease;
      reader.readMessage(value,bosdyn_api_lease_pb.Lease.deserializeBinaryFromReader);
      msg.setLease(value);
      break;
    case 3:
      var value = /** @type {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.SpotCheckCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getLease();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_lease_pb.Lease.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.Command = {
  COMMAND_UNKNOWN: 0,
  COMMAND_START: 1,
  COMMAND_ABORT: 2,
  COMMAND_REVERT_CAL: 3
};

/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest} returns this
*/
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bosdyn.api.Lease lease = 2;
 * @return {?proto.bosdyn.api.Lease}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.getLease = function() {
  return /** @type{?proto.bosdyn.api.Lease} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_lease_pb.Lease, 2));
};


/**
 * @param {?proto.bosdyn.api.Lease|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest} returns this
*/
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.setLease = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.clearLease = function() {
  return this.setLease(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.hasLease = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Command command = 3;
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command}
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.getCommand = function() {
  return /** @type {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandRequest.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.SpotCheckCommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    leaseUseResult: (f = msg.getLeaseUseResult()) && bosdyn_api_lease_pb.LeaseUseResult.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.SpotCheckCommandResponse;
  return proto.bosdyn.api.spot.SpotCheckCommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new bosdyn_api_lease_pb.LeaseUseResult;
      reader.readMessage(value,bosdyn_api_lease_pb.LeaseUseResult.deserializeBinaryFromReader);
      msg.setLeaseUseResult(value);
      break;
    case 3:
      var value = /** @type {!proto.bosdyn.api.spot.SpotCheckCommandResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.SpotCheckCommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getLeaseUseResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_lease_pb.LeaseUseResult.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_ERROR: 2
};

/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse} returns this
*/
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bosdyn.api.LeaseUseResult lease_use_result = 2;
 * @return {?proto.bosdyn.api.LeaseUseResult}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.getLeaseUseResult = function() {
  return /** @type{?proto.bosdyn.api.LeaseUseResult} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_lease_pb.LeaseUseResult, 2));
};


/**
 * @param {?proto.bosdyn.api.LeaseUseResult|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse} returns this
*/
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.setLeaseUseResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.clearLeaseUseResult = function() {
  return this.setLeaseUseResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.hasLeaseUseResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Status status = 3;
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse.Status}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.spot.SpotCheckCommandResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandResponse.Status} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckCommandResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.SpotCheckFeedbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.SpotCheckFeedbackRequest;
  return proto.bosdyn.api.spot.SpotCheckFeedbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.SpotCheckFeedbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest} returns this
*/
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackRequest} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.SpotCheckFeedbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastCommand: jspb.Message.getFieldWithDefault(msg, 12, 0),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cameraResultsMap: (f = msg.getCameraResultsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.toObject) : [],
    loadCellResultsMap: (f = msg.getLoadCellResultsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.spot.LoadCellSpotCheckResult.toObject) : [],
    kinematicCalResultsMap: (f = msg.getKinematicCalResultsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.spot.JointKinematicCheckResult.toObject) : [],
    payloadResult: (f = msg.getPayloadResult()) && proto.bosdyn.api.spot.PayloadCheckResult.toObject(includeInstance, f),
    footHeightResultsMap: (f = msg.getFootHeightResultsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.spot.FootHeightCheckResult.toObject) : [],
    legPairResultsMap: (f = msg.getLegPairResultsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.spot.LegPairCheckResult.toObject) : [],
    hipRangeOfMotionResultsMap: (f = msg.getHipRangeOfMotionResultsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.spot.HipRangeOfMotionResult.toObject) : [],
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    lastCalTimestamp: (f = msg.getLastCalTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.SpotCheckFeedbackResponse;
  return proto.bosdyn.api.spot.SpotCheckFeedbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 12:
      var value = /** @type {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command} */ (reader.readEnum());
      msg.setLastCommand(value);
      break;
    case 6:
      var value = /** @type {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 3:
      var value = msg.getCameraResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.deserializeBinaryFromReader, "", new proto.bosdyn.api.spot.DepthPlaneSpotCheckResult());
         });
      break;
    case 4:
      var value = msg.getLoadCellResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.spot.LoadCellSpotCheckResult.deserializeBinaryFromReader, "", new proto.bosdyn.api.spot.LoadCellSpotCheckResult());
         });
      break;
    case 5:
      var value = msg.getKinematicCalResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.spot.JointKinematicCheckResult.deserializeBinaryFromReader, "", new proto.bosdyn.api.spot.JointKinematicCheckResult());
         });
      break;
    case 8:
      var value = new proto.bosdyn.api.spot.PayloadCheckResult;
      reader.readMessage(value,proto.bosdyn.api.spot.PayloadCheckResult.deserializeBinaryFromReader);
      msg.setPayloadResult(value);
      break;
    case 10:
      var value = msg.getFootHeightResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.spot.FootHeightCheckResult.deserializeBinaryFromReader, "", new proto.bosdyn.api.spot.FootHeightCheckResult());
         });
      break;
    case 11:
      var value = msg.getLegPairResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.spot.LegPairCheckResult.deserializeBinaryFromReader, "", new proto.bosdyn.api.spot.LegPairCheckResult());
         });
      break;
    case 13:
      var value = msg.getHipRangeOfMotionResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.spot.HipRangeOfMotionResult.deserializeBinaryFromReader, "", new proto.bosdyn.api.spot.HipRangeOfMotionResult());
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastCalTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.SpotCheckFeedbackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLastCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getCameraResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.serializeBinaryToWriter);
  }
  f = message.getLoadCellResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.spot.LoadCellSpotCheckResult.serializeBinaryToWriter);
  }
  f = message.getKinematicCalResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.spot.JointKinematicCheckResult.serializeBinaryToWriter);
  }
  f = message.getPayloadResult();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bosdyn.api.spot.PayloadCheckResult.serializeBinaryToWriter
    );
  }
  f = message.getFootHeightResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.spot.FootHeightCheckResult.serializeBinaryToWriter);
  }
  f = message.getLegPairResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.spot.LegPairCheckResult.serializeBinaryToWriter);
  }
  f = message.getHipRangeOfMotionResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.spot.HipRangeOfMotionResult.serializeBinaryToWriter);
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getLastCalTimestamp();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.State = {
  STATE_UNKNOWN: 0,
  STATE_USER_ABORTED: 1,
  STATE_STARTING: 2,
  STATE_LOADCELL_CAL: 3,
  STATE_ENDSTOP_CAL: 4,
  STATE_CAMERA_CHECK: 5,
  STATE_BODY_POSING: 6,
  STATE_FINISHED: 7,
  STATE_REVERTING_CAL: 8,
  STATE_ERROR: 9,
  STATE_WAITING_FOR_COMMAND: 10,
  STATE_HIP_RANGE_OF_MOTION_CHECK: 11,
  STATE_GRIPPER_CAL: 12,
  STATE_SIT_DOWN_AFTER_RUN: 13
};

/**
 * @enum {number}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.Error = {
  ERROR_UNKNOWN: 0,
  ERROR_NONE: 1,
  ERROR_UNEXPECTED_POWER_CHANGE: 2,
  ERROR_INIT_IMU_CHECK: 3,
  ERROR_INIT_NOT_SITTING: 4,
  ERROR_LOADCELL_TIMEOUT: 5,
  ERROR_POWER_ON_FAILURE: 6,
  ERROR_ENDSTOP_TIMEOUT: 7,
  ERROR_FAILED_STAND: 8,
  ERROR_CAMERA_TIMEOUT: 9,
  ERROR_GROUND_CHECK: 10,
  ERROR_POWER_OFF_FAILURE: 11,
  ERROR_REVERT_FAILURE: 12,
  ERROR_FGKC_FAILURE: 13,
  ERROR_GRIPPER_CAL_TIMEOUT: 14
};

/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
*/
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional State state = 2;
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.State}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getState = function() {
  return /** @type {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.State} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SpotCheckCommandRequest.Command last_command = 12;
 * @return {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getLastCommand = function() {
  return /** @type {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.SpotCheckCommandRequest.Command} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setLastCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional Error error = 6;
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.Error}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getError = function() {
  return /** @type {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.Error} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse.Error} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * map<string, DepthPlaneSpotCheckResult> camera_results = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult>}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getCameraResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.bosdyn.api.spot.DepthPlaneSpotCheckResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearCameraResultsMap = function() {
  this.getCameraResultsMap().clear();
  return this;};


/**
 * map<string, LoadCellSpotCheckResult> load_cell_results = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bosdyn.api.spot.LoadCellSpotCheckResult>}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getLoadCellResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bosdyn.api.spot.LoadCellSpotCheckResult>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.bosdyn.api.spot.LoadCellSpotCheckResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearLoadCellResultsMap = function() {
  this.getLoadCellResultsMap().clear();
  return this;};


/**
 * map<string, JointKinematicCheckResult> kinematic_cal_results = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bosdyn.api.spot.JointKinematicCheckResult>}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getKinematicCalResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bosdyn.api.spot.JointKinematicCheckResult>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.bosdyn.api.spot.JointKinematicCheckResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearKinematicCalResultsMap = function() {
  this.getKinematicCalResultsMap().clear();
  return this;};


/**
 * optional PayloadCheckResult payload_result = 8;
 * @return {?proto.bosdyn.api.spot.PayloadCheckResult}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getPayloadResult = function() {
  return /** @type{?proto.bosdyn.api.spot.PayloadCheckResult} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.PayloadCheckResult, 8));
};


/**
 * @param {?proto.bosdyn.api.spot.PayloadCheckResult|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
*/
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setPayloadResult = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearPayloadResult = function() {
  return this.setPayloadResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.hasPayloadResult = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, FootHeightCheckResult> foot_height_results = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bosdyn.api.spot.FootHeightCheckResult>}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getFootHeightResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bosdyn.api.spot.FootHeightCheckResult>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.bosdyn.api.spot.FootHeightCheckResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearFootHeightResultsMap = function() {
  this.getFootHeightResultsMap().clear();
  return this;};


/**
 * map<string, LegPairCheckResult> leg_pair_results = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bosdyn.api.spot.LegPairCheckResult>}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getLegPairResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bosdyn.api.spot.LegPairCheckResult>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.bosdyn.api.spot.LegPairCheckResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearLegPairResultsMap = function() {
  this.getLegPairResultsMap().clear();
  return this;};


/**
 * map<string, HipRangeOfMotionResult> hip_range_of_motion_results = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bosdyn.api.spot.HipRangeOfMotionResult>}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getHipRangeOfMotionResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bosdyn.api.spot.HipRangeOfMotionResult>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      proto.bosdyn.api.spot.HipRangeOfMotionResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearHipRangeOfMotionResultsMap = function() {
  this.getHipRangeOfMotionResultsMap().clear();
  return this;};


/**
 * optional float progress = 7;
 * @return {number}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp last_cal_timestamp = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.getLastCalTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
*/
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.setLastCalTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.SpotCheckFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.clearLastCalTimestamp = function() {
  return this.setLastCalTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.SpotCheckFeedbackResponse.prototype.hasLastCalTimestamp = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    severityScore: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.DepthPlaneSpotCheckResult;
  return proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSeverityScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSeverityScore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_WARNING: 2,
  STATUS_ERROR: 3
};

/**
 * optional Status status = 1;
 * @return {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.Status}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.Status} value
 * @return {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult} returns this
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float severity_score = 2;
 * @return {number}
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.prototype.getSeverityScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.DepthPlaneSpotCheckResult} returns this
 */
proto.bosdyn.api.spot.DepthPlaneSpotCheckResult.prototype.setSeverityScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.PayloadCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.PayloadCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.PayloadCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.PayloadCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    extraPayload: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.PayloadCheckResult}
 */
proto.bosdyn.api.spot.PayloadCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.PayloadCheckResult;
  return proto.bosdyn.api.spot.PayloadCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.PayloadCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.PayloadCheckResult}
 */
proto.bosdyn.api.spot.PayloadCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bosdyn.api.spot.PayloadCheckResult.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setExtraPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.PayloadCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.PayloadCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.PayloadCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.PayloadCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExtraPayload();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.PayloadCheckResult.Error = {
  ERROR_UNKNOWN: 0,
  ERROR_NONE: 1,
  ERROR_MASS_DISCREPANCY: 2
};

/**
 * optional Error error = 1;
 * @return {!proto.bosdyn.api.spot.PayloadCheckResult.Error}
 */
proto.bosdyn.api.spot.PayloadCheckResult.prototype.getError = function() {
  return /** @type {!proto.bosdyn.api.spot.PayloadCheckResult.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.PayloadCheckResult.Error} value
 * @return {!proto.bosdyn.api.spot.PayloadCheckResult} returns this
 */
proto.bosdyn.api.spot.PayloadCheckResult.prototype.setError = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float extra_payload = 2;
 * @return {number}
 */
proto.bosdyn.api.spot.PayloadCheckResult.prototype.getExtraPayload = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.PayloadCheckResult} returns this
 */
proto.bosdyn.api.spot.PayloadCheckResult.prototype.setExtraPayload = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.LoadCellSpotCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.LoadCellSpotCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zero: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    oldZero: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.LoadCellSpotCheckResult}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.LoadCellSpotCheckResult;
  return proto.bosdyn.api.spot.LoadCellSpotCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.LoadCellSpotCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.LoadCellSpotCheckResult}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.LoadCellSpotCheckResult.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZero(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOldZero(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.LoadCellSpotCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.LoadCellSpotCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getZero();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getOldZero();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.Error = {
  ERROR_UNKNOWN: 0,
  ERROR_NONE: 1,
  ERROR_ZERO_OUT_OF_RANGE: 2
};

/**
 * optional Error error = 2;
 * @return {!proto.bosdyn.api.spot.LoadCellSpotCheckResult.Error}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.getError = function() {
  return /** @type {!proto.bosdyn.api.spot.LoadCellSpotCheckResult.Error} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.LoadCellSpotCheckResult.Error} value
 * @return {!proto.bosdyn.api.spot.LoadCellSpotCheckResult} returns this
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.setError = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float zero = 3;
 * @return {number}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.getZero = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.LoadCellSpotCheckResult} returns this
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.setZero = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float old_zero = 4;
 * @return {number}
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.getOldZero = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.LoadCellSpotCheckResult} returns this
 */
proto.bosdyn.api.spot.LoadCellSpotCheckResult.prototype.setOldZero = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.JointKinematicCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.JointKinematicCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    oldOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    healthScore: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.JointKinematicCheckResult;
  return proto.bosdyn.api.spot.JointKinematicCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.JointKinematicCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.JointKinematicCheckResult.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOldOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealthScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.JointKinematicCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.JointKinematicCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getOldOffset();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getHealthScore();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.Error = {
  ERROR_UNKNOWN: 0,
  ERROR_NONE: 1,
  ERROR_CLUTCH_SLIP: 2,
  ERROR_INVALID_RANGE_OF_MOTION: 3
};

/**
 * optional Error error = 2;
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult.Error}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.getError = function() {
  return /** @type {!proto.bosdyn.api.spot.JointKinematicCheckResult.Error} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.JointKinematicCheckResult.Error} value
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult} returns this
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.setError = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float offset = 3;
 * @return {number}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult} returns this
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.setOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float old_offset = 4;
 * @return {number}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.getOldOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult} returns this
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.setOldOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float health_score = 5;
 * @return {number}
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.getHealthScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.JointKinematicCheckResult} returns this
 */
proto.bosdyn.api.spot.JointKinematicCheckResult.prototype.setHealthScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.FootHeightCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.FootHeightCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.FootHeightCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    footHeightErrorFromMean: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.FootHeightCheckResult}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.FootHeightCheckResult;
  return proto.bosdyn.api.spot.FootHeightCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.FootHeightCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.FootHeightCheckResult}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.FootHeightCheckResult.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFootHeightErrorFromMean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.FootHeightCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.FootHeightCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.FootHeightCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFootHeightErrorFromMean();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_WARNING: 2,
  STATUS_ERROR: 3
};

/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.spot.FootHeightCheckResult.Status}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.spot.FootHeightCheckResult.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.FootHeightCheckResult.Status} value
 * @return {!proto.bosdyn.api.spot.FootHeightCheckResult} returns this
 */
proto.bosdyn.api.spot.FootHeightCheckResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float foot_height_error_from_mean = 3;
 * @return {number}
 */
proto.bosdyn.api.spot.FootHeightCheckResult.prototype.getFootHeightErrorFromMean = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.FootHeightCheckResult} returns this
 */
proto.bosdyn.api.spot.FootHeightCheckResult.prototype.setFootHeightErrorFromMean = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.LegPairCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.LegPairCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.LegPairCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.LegPairCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    legPairDistanceChange: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.LegPairCheckResult}
 */
proto.bosdyn.api.spot.LegPairCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.LegPairCheckResult;
  return proto.bosdyn.api.spot.LegPairCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.LegPairCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.LegPairCheckResult}
 */
proto.bosdyn.api.spot.LegPairCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.LegPairCheckResult.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLegPairDistanceChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.LegPairCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.LegPairCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.LegPairCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.LegPairCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLegPairDistanceChange();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.LegPairCheckResult.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_WARNING: 2,
  STATUS_ERROR: 3
};

/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.spot.LegPairCheckResult.Status}
 */
proto.bosdyn.api.spot.LegPairCheckResult.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.spot.LegPairCheckResult.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.LegPairCheckResult.Status} value
 * @return {!proto.bosdyn.api.spot.LegPairCheckResult} returns this
 */
proto.bosdyn.api.spot.LegPairCheckResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float leg_pair_distance_change = 3;
 * @return {number}
 */
proto.bosdyn.api.spot.LegPairCheckResult.prototype.getLegPairDistanceChange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.LegPairCheckResult} returns this
 */
proto.bosdyn.api.spot.LegPairCheckResult.prototype.setLegPairDistanceChange = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.HipRangeOfMotionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.HipRangeOfMotionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hxList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    hyList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.HipRangeOfMotionResult;
  return proto.bosdyn.api.spot.HipRangeOfMotionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.HipRangeOfMotionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bosdyn.api.spot.HipRangeOfMotionResult.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHx(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHy(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.HipRangeOfMotionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.HipRangeOfMotionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getHyList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.Error = {
  ERROR_UNKNOWN: 0,
  ERROR_NONE: 1,
  ERROR_OBSTRUCTED: 2
};

/**
 * optional Error error = 1;
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult.Error}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.getError = function() {
  return /** @type {!proto.bosdyn.api.spot.HipRangeOfMotionResult.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.HipRangeOfMotionResult.Error} value
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.setError = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated float hx = 2;
 * @return {!Array<number>}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.getHxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.setHxList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.addHx = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.clearHxList = function() {
  return this.setHxList([]);
};


/**
 * repeated float hy = 3;
 * @return {!Array<number>}
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.getHyList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.setHyList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.addHy = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.spot.HipRangeOfMotionResult} returns this
 */
proto.bosdyn.api.spot.HipRangeOfMotionResult.prototype.clearHyList = function() {
  return this.setHyList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.CameraCalibrationCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    lease: (f = msg.getLease()) && bosdyn_api_lease_pb.Lease.toObject(includeInstance, f),
    command: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.CameraCalibrationCommandRequest;
  return proto.bosdyn.api.spot.CameraCalibrationCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new bosdyn_api_lease_pb.Lease;
      reader.readMessage(value,bosdyn_api_lease_pb.Lease.deserializeBinaryFromReader);
      msg.setLease(value);
      break;
    case 3:
      var value = /** @type {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.CameraCalibrationCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getLease();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_lease_pb.Lease.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.Command = {
  COMMAND_UNKNOWN: 0,
  COMMAND_START: 1,
  COMMAND_CANCEL: 2
};

/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} returns this
*/
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bosdyn.api.Lease lease = 2;
 * @return {?proto.bosdyn.api.Lease}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.getLease = function() {
  return /** @type{?proto.bosdyn.api.Lease} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_lease_pb.Lease, 2));
};


/**
 * @param {?proto.bosdyn.api.Lease|undefined} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} returns this
*/
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.setLease = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.clearLease = function() {
  return this.setLease(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.hasLease = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Command command = 3;
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest.Command}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.getCommand = function() {
  return /** @type {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest.Command} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest.Command} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandRequest} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationCommandRequest.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.CameraCalibrationCommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    leaseUseResult: (f = msg.getLeaseUseResult()) && bosdyn_api_lease_pb.LeaseUseResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.CameraCalibrationCommandResponse;
  return proto.bosdyn.api.spot.CameraCalibrationCommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new bosdyn_api_lease_pb.LeaseUseResult;
      reader.readMessage(value,bosdyn_api_lease_pb.LeaseUseResult.deserializeBinaryFromReader);
      msg.setLeaseUseResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.CameraCalibrationCommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getLeaseUseResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_lease_pb.LeaseUseResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} returns this
*/
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bosdyn.api.LeaseUseResult lease_use_result = 2;
 * @return {?proto.bosdyn.api.LeaseUseResult}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.getLeaseUseResult = function() {
  return /** @type{?proto.bosdyn.api.LeaseUseResult} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_lease_pb.LeaseUseResult, 2));
};


/**
 * @param {?proto.bosdyn.api.LeaseUseResult|undefined} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} returns this
*/
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.setLeaseUseResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationCommandResponse} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.clearLeaseUseResult = function() {
  return this.setLeaseUseResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.CameraCalibrationCommandResponse.prototype.hasLeaseUseResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest;
  return proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest} returns this
*/
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse;
  return proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_PROCESSING: 1,
  STATUS_SUCCESS: 2,
  STATUS_USER_CANCELED: 3,
  STATUS_POWER_ERROR: 4,
  STATUS_LEASE_ERROR: 5,
  STATUS_ROBOT_COMMAND_ERROR: 7,
  STATUS_CALIBRATION_ERROR: 8,
  STATUS_INTERNAL_ERROR: 9,
  STATUS_CAMERA_FOCUS_ERROR: 14,
  STATUS_TARGET_NOT_CENTERED: 6,
  STATUS_TARGET_NOT_IN_VIEW: 11,
  STATUS_TARGET_NOT_GRAVITY_ALIGNED: 12,
  STATUS_TARGET_UPSIDE_DOWN: 13,
  STATUS_NEVER_RUN: 10,
  STATUS_CAMERA_NOT_DETECTED: 15,
  STATUS_INTRINSIC_WRITE_FAILED: 16,
  STATUS_EXTRINSIC_WRITE_FAILED: 17
};

/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} returns this
*/
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float progress = 3;
 * @return {number}
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse} returns this
 */
proto.bosdyn.api.spot.CameraCalibrationFeedbackResponse.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


goog.object.extend(exports, proto.bosdyn.api.spot);
