// source: bosdyn/api/spot/inverse_kinematics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var bosdyn_api_arm_command_pb = require('../../../bosdyn/api/arm_command_pb.js');
goog.object.extend(proto, bosdyn_api_arm_command_pb);
var bosdyn_api_geometry_pb = require('../../../bosdyn/api/geometry_pb.js');
goog.object.extend(proto, bosdyn_api_geometry_pb);
var bosdyn_api_header_pb = require('../../../bosdyn/api/header_pb.js');
goog.object.extend(proto, bosdyn_api_header_pb);
var bosdyn_api_robot_state_pb = require('../../../bosdyn/api/robot_state_pb.js');
goog.object.extend(proto, bosdyn_api_robot_state_pb);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.NamedArmConfiguration', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.StanceSpecificationCase', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.TaskSpecificationCase', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.ToolSpecificationCase', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.spot.InverseKinematicsResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.displayName = 'proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.spot.InverseKinematicsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.spot.InverseKinematicsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.spot.InverseKinematicsResponse.displayName = 'proto.bosdyn.api.spot.InverseKinematicsResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_ = [[8,9],[10,11],[12,13]];

/**
 * @enum {number}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.StanceSpecificationCase = {
  STANCE_SPECIFICATION_NOT_SET: 0,
  FIXED_STANCE: 8,
  ON_GROUND_PLANE_STANCE: 9
};

/**
 * @return {proto.bosdyn.api.spot.InverseKinematicsRequest.StanceSpecificationCase}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getStanceSpecificationCase = function() {
  return /** @type {proto.bosdyn.api.spot.InverseKinematicsRequest.StanceSpecificationCase} */(jspb.Message.computeOneofCase(this, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolSpecificationCase = {
  TOOL_SPECIFICATION_NOT_SET: 0,
  WRIST_MOUNTED_TOOL: 10,
  BODY_MOUNTED_TOOL: 11
};

/**
 * @return {proto.bosdyn.api.spot.InverseKinematicsRequest.ToolSpecificationCase}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getToolSpecificationCase = function() {
  return /** @type {proto.bosdyn.api.spot.InverseKinematicsRequest.ToolSpecificationCase} */(jspb.Message.computeOneofCase(this, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.TaskSpecificationCase = {
  TASK_SPECIFICATION_NOT_SET: 0,
  TOOL_POSE_TASK: 12,
  TOOL_GAZE_TASK: 13
};

/**
 * @return {proto.bosdyn.api.spot.InverseKinematicsRequest.TaskSpecificationCase}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getTaskSpecificationCase = function() {
  return /** @type {proto.bosdyn.api.spot.InverseKinematicsRequest.TaskSpecificationCase} */(jspb.Message.computeOneofCase(this, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[2]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    rootFrameName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rootTformScene: (f = msg.getRootTformScene()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f),
    sceneTformTask: (f = msg.getSceneTformTask()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f),
    nominalArmConfiguration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    nominalArmConfigurationOverrides: (f = msg.getNominalArmConfigurationOverrides()) && bosdyn_api_arm_command_pb.ArmJointPosition.toObject(includeInstance, f),
    sceneTformBodyNominal: (f = msg.getSceneTformBodyNominal()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f),
    fixedStance: (f = msg.getFixedStance()) && proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.toObject(includeInstance, f),
    onGroundPlaneStance: (f = msg.getOnGroundPlaneStance()) && proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.toObject(includeInstance, f),
    wristMountedTool: (f = msg.getWristMountedTool()) && proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.toObject(includeInstance, f),
    bodyMountedTool: (f = msg.getBodyMountedTool()) && proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.toObject(includeInstance, f),
    toolPoseTask: (f = msg.getToolPoseTask()) && proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.toObject(includeInstance, f),
    toolGazeTask: (f = msg.getToolGazeTask()) && proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootFrameName(value);
      break;
    case 3:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setRootTformScene(value);
      break;
    case 4:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setSceneTformTask(value);
      break;
    case 6:
      var value = /** @type {!proto.bosdyn.api.spot.InverseKinematicsRequest.NamedArmConfiguration} */ (reader.readEnum());
      msg.setNominalArmConfiguration(value);
      break;
    case 5:
      var value = new bosdyn_api_arm_command_pb.ArmJointPosition;
      reader.readMessage(value,bosdyn_api_arm_command_pb.ArmJointPosition.deserializeBinaryFromReader);
      msg.setNominalArmConfigurationOverrides(value);
      break;
    case 7:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setSceneTformBodyNominal(value);
      break;
    case 8:
      var value = new proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance;
      reader.readMessage(value,proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.deserializeBinaryFromReader);
      msg.setFixedStance(value);
      break;
    case 9:
      var value = new proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance;
      reader.readMessage(value,proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.deserializeBinaryFromReader);
      msg.setOnGroundPlaneStance(value);
      break;
    case 10:
      var value = new proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool;
      reader.readMessage(value,proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.deserializeBinaryFromReader);
      msg.setWristMountedTool(value);
      break;
    case 11:
      var value = new proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool;
      reader.readMessage(value,proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.deserializeBinaryFromReader);
      msg.setBodyMountedTool(value);
      break;
    case 12:
      var value = new proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask;
      reader.readMessage(value,proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.deserializeBinaryFromReader);
      msg.setToolPoseTask(value);
      break;
    case 13:
      var value = new proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask;
      reader.readMessage(value,proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.deserializeBinaryFromReader);
      msg.setToolGazeTask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getRootFrameName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRootTformScene();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
  f = message.getSceneTformTask();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
  f = message.getNominalArmConfiguration();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getNominalArmConfigurationOverrides();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      bosdyn_api_arm_command_pb.ArmJointPosition.serializeBinaryToWriter
    );
  }
  f = message.getSceneTformBodyNominal();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
  f = message.getFixedStance();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.serializeBinaryToWriter
    );
  }
  f = message.getOnGroundPlaneStance();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.serializeBinaryToWriter
    );
  }
  f = message.getWristMountedTool();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.serializeBinaryToWriter
    );
  }
  f = message.getBodyMountedTool();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.serializeBinaryToWriter
    );
  }
  f = message.getToolPoseTask();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.serializeBinaryToWriter
    );
  }
  f = message.getToolGazeTask();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.NamedArmConfiguration = {
  ARM_CONFIG_UNKNOWN: 0,
  ARM_CONFIG_CURRENT: 1,
  ARM_CONFIG_READY: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.toObject = function(includeInstance, msg) {
  var f, obj = {
    flRtScene: (f = msg.getFlRtScene()) && bosdyn_api_geometry_pb.Vec3.toObject(includeInstance, f),
    frRtScene: (f = msg.getFrRtScene()) && bosdyn_api_geometry_pb.Vec3.toObject(includeInstance, f),
    hlRtScene: (f = msg.getHlRtScene()) && bosdyn_api_geometry_pb.Vec3.toObject(includeInstance, f),
    hrRtScene: (f = msg.getHrRtScene()) && bosdyn_api_geometry_pb.Vec3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_geometry_pb.Vec3;
      reader.readMessage(value,bosdyn_api_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setFlRtScene(value);
      break;
    case 2:
      var value = new bosdyn_api_geometry_pb.Vec3;
      reader.readMessage(value,bosdyn_api_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setFrRtScene(value);
      break;
    case 3:
      var value = new bosdyn_api_geometry_pb.Vec3;
      reader.readMessage(value,bosdyn_api_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setHlRtScene(value);
      break;
    case 4:
      var value = new bosdyn_api_geometry_pb.Vec3;
      reader.readMessage(value,bosdyn_api_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setHrRtScene(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlRtScene();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getFrRtScene();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getHlRtScene();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      bosdyn_api_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getHrRtScene();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      bosdyn_api_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.Vec3 fl_rt_scene = 1;
 * @return {?proto.bosdyn.api.Vec3}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.getFlRtScene = function() {
  return /** @type{?proto.bosdyn.api.Vec3} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Vec3, 1));
};


/**
 * @param {?proto.bosdyn.api.Vec3|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.setFlRtScene = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.clearFlRtScene = function() {
  return this.setFlRtScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.hasFlRtScene = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bosdyn.api.Vec3 fr_rt_scene = 2;
 * @return {?proto.bosdyn.api.Vec3}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.getFrRtScene = function() {
  return /** @type{?proto.bosdyn.api.Vec3} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Vec3, 2));
};


/**
 * @param {?proto.bosdyn.api.Vec3|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.setFrRtScene = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.clearFrRtScene = function() {
  return this.setFrRtScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.hasFrRtScene = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bosdyn.api.Vec3 hl_rt_scene = 3;
 * @return {?proto.bosdyn.api.Vec3}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.getHlRtScene = function() {
  return /** @type{?proto.bosdyn.api.Vec3} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Vec3, 3));
};


/**
 * @param {?proto.bosdyn.api.Vec3|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.setHlRtScene = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.clearHlRtScene = function() {
  return this.setHlRtScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.hasHlRtScene = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bosdyn.api.Vec3 hr_rt_scene = 4;
 * @return {?proto.bosdyn.api.Vec3}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.getHrRtScene = function() {
  return /** @type{?proto.bosdyn.api.Vec3} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Vec3, 4));
};


/**
 * @param {?proto.bosdyn.api.Vec3|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.setHrRtScene = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.clearHrRtScene = function() {
  return this.setHrRtScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance.prototype.hasHrRtScene = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneTformGround: (f = msg.getSceneTformGround()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setSceneTformGround(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneTformGround();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.SE3Pose scene_tform_ground = 1;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.prototype.getSceneTformGround = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 1));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.prototype.setSceneTformGround = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.prototype.clearSceneTformGround = function() {
  return this.setSceneTformGround(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance.prototype.hasSceneTformGround = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.toObject = function(includeInstance, msg) {
  var f, obj = {
    wristTformTool: (f = msg.getWristTformTool()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setWristTformTool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWristTformTool();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.SE3Pose wrist_tform_tool = 1;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.prototype.getWristTformTool = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 1));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.prototype.setWristTformTool = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.prototype.clearWristTformTool = function() {
  return this.setWristTformTool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool.prototype.hasWristTformTool = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.toObject = function(includeInstance, msg) {
  var f, obj = {
    bodyTformTool: (f = msg.getBodyTformTool()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setBodyTformTool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBodyTformTool();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.SE3Pose body_tform_tool = 1;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.prototype.getBodyTformTool = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 1));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.prototype.setBodyTformTool = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.prototype.clearBodyTformTool = function() {
  return this.setBodyTformTool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool.prototype.hasBodyTformTool = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskTformDesiredTool: (f = msg.getTaskTformDesiredTool()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setTaskTformDesiredTool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskTformDesiredTool();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.SE3Pose task_tform_desired_tool = 1;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.prototype.getTaskTformDesiredTool = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 1));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.prototype.setTaskTformDesiredTool = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.prototype.clearTaskTformDesiredTool = function() {
  return this.setTaskTformDesiredTool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask.prototype.hasTaskTformDesiredTool = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetInTask: (f = msg.getTargetInTask()) && bosdyn_api_geometry_pb.Vec3.toObject(includeInstance, f),
    taskTformDesiredTool: (f = msg.getTaskTformDesiredTool()) && bosdyn_api_geometry_pb.SE3Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask;
  return proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_geometry_pb.Vec3;
      reader.readMessage(value,bosdyn_api_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setTargetInTask(value);
      break;
    case 2:
      var value = new bosdyn_api_geometry_pb.SE3Pose;
      reader.readMessage(value,bosdyn_api_geometry_pb.SE3Pose.deserializeBinaryFromReader);
      msg.setTaskTformDesiredTool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetInTask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getTaskTformDesiredTool();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_geometry_pb.SE3Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional bosdyn.api.Vec3 target_in_task = 1;
 * @return {?proto.bosdyn.api.Vec3}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.getTargetInTask = function() {
  return /** @type{?proto.bosdyn.api.Vec3} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Vec3, 1));
};


/**
 * @param {?proto.bosdyn.api.Vec3|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.setTargetInTask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.clearTargetInTask = function() {
  return this.setTargetInTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.hasTargetInTask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bosdyn.api.SE3Pose task_tform_desired_tool = 2;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.getTaskTformDesiredTool = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 2));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.setTaskTformDesiredTool = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.clearTaskTformDesiredTool = function() {
  return this.setTaskTformDesiredTool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask.prototype.hasTaskTformDesiredTool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string root_frame_name = 2;
 * @return {string}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getRootFrameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setRootFrameName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bosdyn.api.SE3Pose root_tform_scene = 3;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getRootTformScene = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 3));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setRootTformScene = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearRootTformScene = function() {
  return this.setRootTformScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasRootTformScene = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bosdyn.api.SE3Pose scene_tform_task = 4;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getSceneTformTask = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 4));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setSceneTformTask = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearSceneTformTask = function() {
  return this.setSceneTformTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasSceneTformTask = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NamedArmConfiguration nominal_arm_configuration = 6;
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest.NamedArmConfiguration}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getNominalArmConfiguration = function() {
  return /** @type {!proto.bosdyn.api.spot.InverseKinematicsRequest.NamedArmConfiguration} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.InverseKinematicsRequest.NamedArmConfiguration} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setNominalArmConfiguration = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bosdyn.api.ArmJointPosition nominal_arm_configuration_overrides = 5;
 * @return {?proto.bosdyn.api.ArmJointPosition}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getNominalArmConfigurationOverrides = function() {
  return /** @type{?proto.bosdyn.api.ArmJointPosition} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_arm_command_pb.ArmJointPosition, 5));
};


/**
 * @param {?proto.bosdyn.api.ArmJointPosition|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setNominalArmConfigurationOverrides = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearNominalArmConfigurationOverrides = function() {
  return this.setNominalArmConfigurationOverrides(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasNominalArmConfigurationOverrides = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bosdyn.api.SE3Pose scene_tform_body_nominal = 7;
 * @return {?proto.bosdyn.api.SE3Pose}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getSceneTformBodyNominal = function() {
  return /** @type{?proto.bosdyn.api.SE3Pose} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.SE3Pose, 7));
};


/**
 * @param {?proto.bosdyn.api.SE3Pose|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setSceneTformBodyNominal = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearSceneTformBodyNominal = function() {
  return this.setSceneTformBodyNominal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasSceneTformBodyNominal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FixedStance fixed_stance = 8;
 * @return {?proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getFixedStance = function() {
  return /** @type{?proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance, 8));
};


/**
 * @param {?proto.bosdyn.api.spot.InverseKinematicsRequest.FixedStance|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setFixedStance = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearFixedStance = function() {
  return this.setFixedStance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasFixedStance = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OnGroundPlaneStance on_ground_plane_stance = 9;
 * @return {?proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getOnGroundPlaneStance = function() {
  return /** @type{?proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance, 9));
};


/**
 * @param {?proto.bosdyn.api.spot.InverseKinematicsRequest.OnGroundPlaneStance|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setOnGroundPlaneStance = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearOnGroundPlaneStance = function() {
  return this.setOnGroundPlaneStance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasOnGroundPlaneStance = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional WristMountedTool wrist_mounted_tool = 10;
 * @return {?proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getWristMountedTool = function() {
  return /** @type{?proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool, 10));
};


/**
 * @param {?proto.bosdyn.api.spot.InverseKinematicsRequest.WristMountedTool|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setWristMountedTool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearWristMountedTool = function() {
  return this.setWristMountedTool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasWristMountedTool = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BodyMountedTool body_mounted_tool = 11;
 * @return {?proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getBodyMountedTool = function() {
  return /** @type{?proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool, 11));
};


/**
 * @param {?proto.bosdyn.api.spot.InverseKinematicsRequest.BodyMountedTool|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setBodyMountedTool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearBodyMountedTool = function() {
  return this.setBodyMountedTool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasBodyMountedTool = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ToolPoseTask tool_pose_task = 12;
 * @return {?proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getToolPoseTask = function() {
  return /** @type{?proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask, 12));
};


/**
 * @param {?proto.bosdyn.api.spot.InverseKinematicsRequest.ToolPoseTask|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setToolPoseTask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[2], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearToolPoseTask = function() {
  return this.setToolPoseTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasToolPoseTask = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ToolGazeTask tool_gaze_task = 13;
 * @return {?proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.getToolGazeTask = function() {
  return /** @type{?proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask, 13));
};


/**
 * @param {?proto.bosdyn.api.spot.InverseKinematicsRequest.ToolGazeTask|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.setToolGazeTask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.bosdyn.api.spot.InverseKinematicsRequest.oneofGroups_[2], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsRequest} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.clearToolGazeTask = function() {
  return this.setToolGazeTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsRequest.prototype.hasToolGazeTask = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.spot.InverseKinematicsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.spot.InverseKinematicsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    robotConfiguration: (f = msg.getRobotConfiguration()) && bosdyn_api_robot_state_pb.KinematicState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.spot.InverseKinematicsResponse;
  return proto.bosdyn.api.spot.InverseKinematicsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.bosdyn.api.spot.InverseKinematicsResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new bosdyn_api_robot_state_pb.KinematicState;
      reader.readMessage(value,bosdyn_api_robot_state_pb.KinematicState.deserializeBinaryFromReader);
      msg.setRobotConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.spot.InverseKinematicsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.spot.InverseKinematicsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRobotConfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      bosdyn_api_robot_state_pb.KinematicState.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_NO_SOLUTION_FOUND: 2
};

/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse.Status}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.spot.InverseKinematicsResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.spot.InverseKinematicsResponse.Status} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bosdyn.api.KinematicState robot_configuration = 3;
 * @return {?proto.bosdyn.api.KinematicState}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.getRobotConfiguration = function() {
  return /** @type{?proto.bosdyn.api.KinematicState} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_robot_state_pb.KinematicState, 3));
};


/**
 * @param {?proto.bosdyn.api.KinematicState|undefined} value
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse} returns this
*/
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.setRobotConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.spot.InverseKinematicsResponse} returns this
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.clearRobotConfiguration = function() {
  return this.setRobotConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.spot.InverseKinematicsResponse.prototype.hasRobotConfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.bosdyn.api.spot);
