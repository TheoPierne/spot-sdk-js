// source: bosdyn/api/autowalk/autowalk.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bosdyn_api_header_pb = require('../../../bosdyn/api/header_pb.js');
goog.object.extend(proto, bosdyn_api_header_pb);
var bosdyn_api_lease_pb = require('../../../bosdyn/api/lease_pb.js');
goog.object.extend(proto, bosdyn_api_lease_pb);
var bosdyn_api_autowalk_walks_pb = require('../../../bosdyn/api/autowalk/walks_pb.js');
goog.object.extend(proto, bosdyn_api_autowalk_walks_pb);
var bosdyn_api_mission_mission_pb = require('../../../bosdyn/api/mission/mission_pb.js');
goog.object.extend(proto, bosdyn_api_mission_mission_pb);
var bosdyn_api_mission_nodes_pb = require('../../../bosdyn/api/mission/nodes_pb.js');
goog.object.extend(proto, bosdyn_api_mission_nodes_pb);
goog.exportSymbol('proto.bosdyn.api.autowalk.CompileAutowalkRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.CompileAutowalkResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.CompileAutowalkResponse.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.ElementIdentifiers', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.FailedElement', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.LoadAutowalkRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.LoadAutowalkResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.LoadAutowalkResponse.Status', null, global);
goog.exportSymbol('proto.bosdyn.api.autowalk.NodeIdentifier', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.FailedElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.autowalk.FailedElement.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.autowalk.FailedElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.FailedElement.displayName = 'proto.bosdyn.api.autowalk.FailedElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.NodeIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.autowalk.NodeIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.NodeIdentifier.displayName = 'proto.bosdyn.api.autowalk.NodeIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.ElementIdentifiers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.autowalk.ElementIdentifiers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.ElementIdentifiers.displayName = 'proto.bosdyn.api.autowalk.ElementIdentifiers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.autowalk.CompileAutowalkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.CompileAutowalkRequest.displayName = 'proto.bosdyn.api.autowalk.CompileAutowalkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.autowalk.CompileAutowalkResponse.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.autowalk.CompileAutowalkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.CompileAutowalkResponse.displayName = 'proto.bosdyn.api.autowalk.CompileAutowalkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.autowalk.LoadAutowalkRequest.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.autowalk.LoadAutowalkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.LoadAutowalkRequest.displayName = 'proto.bosdyn.api.autowalk.LoadAutowalkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.autowalk.LoadAutowalkResponse.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.autowalk.LoadAutowalkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.autowalk.LoadAutowalkResponse.displayName = 'proto.bosdyn.api.autowalk.LoadAutowalkResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.autowalk.FailedElement.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.FailedElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.FailedElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.FailedElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    warningsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.FailedElement}
 */
proto.bosdyn.api.autowalk.FailedElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.FailedElement;
  return proto.bosdyn.api.autowalk.FailedElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.FailedElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.FailedElement}
 */
proto.bosdyn.api.autowalk.FailedElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.FailedElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.FailedElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.FailedElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string errors = 1;
 * @return {!Array<string>}
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bosdyn.api.autowalk.FailedElement} returns this
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.setErrorsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.autowalk.FailedElement} returns this
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.addErrors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.FailedElement} returns this
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};


/**
 * repeated string warnings = 2;
 * @return {!Array<string>}
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.getWarningsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bosdyn.api.autowalk.FailedElement} returns this
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.setWarningsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.autowalk.FailedElement} returns this
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.addWarnings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.FailedElement} returns this
 */
proto.bosdyn.api.autowalk.FailedElement.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.NodeIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.NodeIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.NodeIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.NodeIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userDataId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.NodeIdentifier;
  return proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.NodeIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDataId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.NodeIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.NodeIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserDataId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 node_id = 1;
 * @return {number}
 */
proto.bosdyn.api.autowalk.NodeIdentifier.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.autowalk.NodeIdentifier} returns this
 */
proto.bosdyn.api.autowalk.NodeIdentifier.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_data_id = 2;
 * @return {string}
 */
proto.bosdyn.api.autowalk.NodeIdentifier.prototype.getUserDataId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.autowalk.NodeIdentifier} returns this
 */
proto.bosdyn.api.autowalk.NodeIdentifier.prototype.setUserDataId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.ElementIdentifiers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.ElementIdentifiers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootId: (f = msg.getRootId()) && proto.bosdyn.api.autowalk.NodeIdentifier.toObject(includeInstance, f),
    actionId: (f = msg.getActionId()) && proto.bosdyn.api.autowalk.NodeIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.ElementIdentifiers;
  return proto.bosdyn.api.autowalk.ElementIdentifiers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.ElementIdentifiers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bosdyn.api.autowalk.NodeIdentifier;
      reader.readMessage(value,proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader);
      msg.setRootId(value);
      break;
    case 2:
      var value = new proto.bosdyn.api.autowalk.NodeIdentifier;
      reader.readMessage(value,proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader);
      msg.setActionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.ElementIdentifiers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.ElementIdentifiers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getActionId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeIdentifier root_id = 1;
 * @return {?proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.getRootId = function() {
  return /** @type{?proto.bosdyn.api.autowalk.NodeIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.autowalk.NodeIdentifier, 1));
};


/**
 * @param {?proto.bosdyn.api.autowalk.NodeIdentifier|undefined} value
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers} returns this
*/
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.setRootId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers} returns this
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.clearRootId = function() {
  return this.setRootId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.hasRootId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeIdentifier action_id = 2;
 * @return {?proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.getActionId = function() {
  return /** @type{?proto.bosdyn.api.autowalk.NodeIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.autowalk.NodeIdentifier, 2));
};


/**
 * @param {?proto.bosdyn.api.autowalk.NodeIdentifier|undefined} value
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers} returns this
*/
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.setActionId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers} returns this
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.clearActionId = function() {
  return this.setActionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.ElementIdentifiers.prototype.hasActionId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.CompileAutowalkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    walk: (f = msg.getWalk()) && bosdyn_api_autowalk_walks_pb.Walk.toObject(includeInstance, f),
    treatWarningsAsErrors: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.CompileAutowalkRequest;
  return proto.bosdyn.api.autowalk.CompileAutowalkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new bosdyn_api_autowalk_walks_pb.Walk;
      reader.readMessage(value,bosdyn_api_autowalk_walks_pb.Walk.deserializeBinaryFromReader);
      msg.setWalk(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTreatWarningsAsErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.CompileAutowalkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getWalk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_autowalk_walks_pb.Walk.serializeBinaryToWriter
    );
  }
  f = message.getTreatWarningsAsErrors();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Walk walk = 2;
 * @return {?proto.bosdyn.api.autowalk.Walk}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.getWalk = function() {
  return /** @type{?proto.bosdyn.api.autowalk.Walk} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_autowalk_walks_pb.Walk, 2));
};


/**
 * @param {?proto.bosdyn.api.autowalk.Walk|undefined} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.setWalk = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.clearWalk = function() {
  return this.setWalk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.hasWalk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool treat_warnings_as_errors = 5;
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.getTreatWarningsAsErrors = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkRequest.prototype.setTreatWarningsAsErrors = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.CompileAutowalkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    root: (f = msg.getRoot()) && bosdyn_api_mission_nodes_pb.Node.toObject(includeInstance, f),
    elementIdentifiersList: jspb.Message.toObjectList(msg.getElementIdentifiersList(),
    proto.bosdyn.api.autowalk.ElementIdentifiers.toObject, includeInstance),
    failedElementsMap: (f = msg.getFailedElementsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.autowalk.FailedElement.toObject) : [],
    dockingNode: (f = msg.getDockingNode()) && proto.bosdyn.api.autowalk.NodeIdentifier.toObject(includeInstance, f),
    loopNode: (f = msg.getLoopNode()) && proto.bosdyn.api.autowalk.NodeIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.CompileAutowalkResponse;
  return proto.bosdyn.api.autowalk.CompileAutowalkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.bosdyn.api.autowalk.CompileAutowalkResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new bosdyn_api_mission_nodes_pb.Node;
      reader.readMessage(value,bosdyn_api_mission_nodes_pb.Node.deserializeBinaryFromReader);
      msg.setRoot(value);
      break;
    case 5:
      var value = new proto.bosdyn.api.autowalk.ElementIdentifiers;
      reader.readMessage(value,proto.bosdyn.api.autowalk.ElementIdentifiers.deserializeBinaryFromReader);
      msg.addElementIdentifiers(value);
      break;
    case 6:
      var value = msg.getFailedElementsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.autowalk.FailedElement.deserializeBinaryFromReader, 0, new proto.bosdyn.api.autowalk.FailedElement());
         });
      break;
    case 7:
      var value = new proto.bosdyn.api.autowalk.NodeIdentifier;
      reader.readMessage(value,proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader);
      msg.setDockingNode(value);
      break;
    case 8:
      var value = new proto.bosdyn.api.autowalk.NodeIdentifier;
      reader.readMessage(value,proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader);
      msg.setLoopNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.CompileAutowalkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      bosdyn_api_mission_nodes_pb.Node.serializeBinaryToWriter
    );
  }
  f = message.getElementIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bosdyn.api.autowalk.ElementIdentifiers.serializeBinaryToWriter
    );
  }
  f = message.getFailedElementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.autowalk.FailedElement.serializeBinaryToWriter);
  }
  f = message.getDockingNode();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getLoopNode();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_COMPILE_ERROR: 2
};

/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse.Status}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.autowalk.CompileAutowalkResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.autowalk.CompileAutowalkResponse.Status} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bosdyn.api.mission.Node root = 4;
 * @return {?proto.bosdyn.api.mission.Node}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getRoot = function() {
  return /** @type{?proto.bosdyn.api.mission.Node} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_mission_nodes_pb.Node, 4));
};


/**
 * @param {?proto.bosdyn.api.mission.Node|undefined} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.setRoot = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.clearRoot = function() {
  return this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.hasRoot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated ElementIdentifiers element_identifiers = 5;
 * @return {!Array<!proto.bosdyn.api.autowalk.ElementIdentifiers>}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getElementIdentifiersList = function() {
  return /** @type{!Array<!proto.bosdyn.api.autowalk.ElementIdentifiers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bosdyn.api.autowalk.ElementIdentifiers, 5));
};


/**
 * @param {!Array<!proto.bosdyn.api.autowalk.ElementIdentifiers>} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.setElementIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bosdyn.api.autowalk.ElementIdentifiers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.addElementIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bosdyn.api.autowalk.ElementIdentifiers, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.clearElementIdentifiersList = function() {
  return this.setElementIdentifiersList([]);
};


/**
 * map<int32, FailedElement> failed_elements = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.bosdyn.api.autowalk.FailedElement>}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getFailedElementsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.bosdyn.api.autowalk.FailedElement>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.bosdyn.api.autowalk.FailedElement));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.clearFailedElementsMap = function() {
  this.getFailedElementsMap().clear();
  return this;};


/**
 * optional NodeIdentifier docking_node = 7;
 * @return {?proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getDockingNode = function() {
  return /** @type{?proto.bosdyn.api.autowalk.NodeIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.autowalk.NodeIdentifier, 7));
};


/**
 * @param {?proto.bosdyn.api.autowalk.NodeIdentifier|undefined} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.setDockingNode = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.clearDockingNode = function() {
  return this.setDockingNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.hasDockingNode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NodeIdentifier loop_node = 8;
 * @return {?proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.getLoopNode = function() {
  return /** @type{?proto.bosdyn.api.autowalk.NodeIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.autowalk.NodeIdentifier, 8));
};


/**
 * @param {?proto.bosdyn.api.autowalk.NodeIdentifier|undefined} value
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.setLoopNode = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.CompileAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.clearLoopNode = function() {
  return this.setLoopNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.CompileAutowalkResponse.prototype.hasLoopNode = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.LoadAutowalkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    walk: (f = msg.getWalk()) && bosdyn_api_autowalk_walks_pb.Walk.toObject(includeInstance, f),
    leasesList: jspb.Message.toObjectList(msg.getLeasesList(),
    bosdyn_api_lease_pb.Lease.toObject, includeInstance),
    treatWarningsAsErrors: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.LoadAutowalkRequest;
  return proto.bosdyn.api.autowalk.LoadAutowalkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new bosdyn_api_autowalk_walks_pb.Walk;
      reader.readMessage(value,bosdyn_api_autowalk_walks_pb.Walk.deserializeBinaryFromReader);
      msg.setWalk(value);
      break;
    case 3:
      var value = new bosdyn_api_lease_pb.Lease;
      reader.readMessage(value,bosdyn_api_lease_pb.Lease.deserializeBinaryFromReader);
      msg.addLeases(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTreatWarningsAsErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.LoadAutowalkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getWalk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_autowalk_walks_pb.Walk.serializeBinaryToWriter
    );
  }
  f = message.getLeasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      bosdyn_api_lease_pb.Lease.serializeBinaryToWriter
    );
  }
  f = message.getTreatWarningsAsErrors();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bosdyn.api.RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Walk walk = 2;
 * @return {?proto.bosdyn.api.autowalk.Walk}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.getWalk = function() {
  return /** @type{?proto.bosdyn.api.autowalk.Walk} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_autowalk_walks_pb.Walk, 2));
};


/**
 * @param {?proto.bosdyn.api.autowalk.Walk|undefined} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.setWalk = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.clearWalk = function() {
  return this.setWalk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.hasWalk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bosdyn.api.Lease leases = 3;
 * @return {!Array<!proto.bosdyn.api.Lease>}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.getLeasesList = function() {
  return /** @type{!Array<!proto.bosdyn.api.Lease>} */ (
    jspb.Message.getRepeatedWrapperField(this, bosdyn_api_lease_pb.Lease, 3));
};


/**
 * @param {!Array<!proto.bosdyn.api.Lease>} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.setLeasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bosdyn.api.Lease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.Lease}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.addLeases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bosdyn.api.Lease, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.clearLeasesList = function() {
  return this.setLeasesList([]);
};


/**
 * optional bool treat_warnings_as_errors = 5;
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.getTreatWarningsAsErrors = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkRequest} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkRequest.prototype.setTreatWarningsAsErrors = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.repeatedFields_ = [3,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.autowalk.LoadAutowalkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    leaseUseResultsList: jspb.Message.toObjectList(msg.getLeaseUseResultsList(),
    bosdyn_api_lease_pb.LeaseUseResult.toObject, includeInstance),
    failedNodesList: jspb.Message.toObjectList(msg.getFailedNodesList(),
    bosdyn_api_mission_mission_pb.FailedNode.toObject, includeInstance),
    elementIdentifiersList: jspb.Message.toObjectList(msg.getElementIdentifiersList(),
    proto.bosdyn.api.autowalk.ElementIdentifiers.toObject, includeInstance),
    failedElementsMap: (f = msg.getFailedElementsMap()) ? f.toObject(includeInstance, proto.bosdyn.api.autowalk.FailedElement.toObject) : [],
    missionId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    dockingNode: (f = msg.getDockingNode()) && proto.bosdyn.api.autowalk.NodeIdentifier.toObject(includeInstance, f),
    loopNode: (f = msg.getLoopNode()) && proto.bosdyn.api.autowalk.NodeIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.autowalk.LoadAutowalkResponse;
  return proto.bosdyn.api.autowalk.LoadAutowalkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.bosdyn.api.autowalk.LoadAutowalkResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new bosdyn_api_lease_pb.LeaseUseResult;
      reader.readMessage(value,bosdyn_api_lease_pb.LeaseUseResult.deserializeBinaryFromReader);
      msg.addLeaseUseResults(value);
      break;
    case 5:
      var value = new bosdyn_api_mission_mission_pb.FailedNode;
      reader.readMessage(value,bosdyn_api_mission_mission_pb.FailedNode.deserializeBinaryFromReader);
      msg.addFailedNodes(value);
      break;
    case 7:
      var value = new proto.bosdyn.api.autowalk.ElementIdentifiers;
      reader.readMessage(value,proto.bosdyn.api.autowalk.ElementIdentifiers.deserializeBinaryFromReader);
      msg.addElementIdentifiers(value);
      break;
    case 8:
      var value = msg.getFailedElementsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.bosdyn.api.autowalk.FailedElement.deserializeBinaryFromReader, 0, new proto.bosdyn.api.autowalk.FailedElement());
         });
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMissionId(value);
      break;
    case 10:
      var value = new proto.bosdyn.api.autowalk.NodeIdentifier;
      reader.readMessage(value,proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader);
      msg.setDockingNode(value);
      break;
    case 11:
      var value = new proto.bosdyn.api.autowalk.NodeIdentifier;
      reader.readMessage(value,proto.bosdyn.api.autowalk.NodeIdentifier.deserializeBinaryFromReader);
      msg.setLoopNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.autowalk.LoadAutowalkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLeaseUseResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      bosdyn_api_lease_pb.LeaseUseResult.serializeBinaryToWriter
    );
  }
  f = message.getFailedNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      bosdyn_api_mission_mission_pb.FailedNode.serializeBinaryToWriter
    );
  }
  f = message.getElementIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.bosdyn.api.autowalk.ElementIdentifiers.serializeBinaryToWriter
    );
  }
  f = message.getFailedElementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.bosdyn.api.autowalk.FailedElement.serializeBinaryToWriter);
  }
  f = message.getMissionId();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getDockingNode();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getLoopNode();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bosdyn.api.autowalk.NodeIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_COMPILE_ERROR: 2,
  STATUS_VALIDATE_ERROR: 3
};

/**
 * optional bosdyn.api.ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse.Status}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.autowalk.LoadAutowalkResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bosdyn.api.autowalk.LoadAutowalkResponse.Status} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated bosdyn.api.LeaseUseResult lease_use_results = 3;
 * @return {!Array<!proto.bosdyn.api.LeaseUseResult>}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getLeaseUseResultsList = function() {
  return /** @type{!Array<!proto.bosdyn.api.LeaseUseResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, bosdyn_api_lease_pb.LeaseUseResult, 3));
};


/**
 * @param {!Array<!proto.bosdyn.api.LeaseUseResult>} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setLeaseUseResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bosdyn.api.LeaseUseResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.LeaseUseResult}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.addLeaseUseResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bosdyn.api.LeaseUseResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearLeaseUseResultsList = function() {
  return this.setLeaseUseResultsList([]);
};


/**
 * repeated bosdyn.api.mission.FailedNode failed_nodes = 5;
 * @return {!Array<!proto.bosdyn.api.mission.FailedNode>}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getFailedNodesList = function() {
  return /** @type{!Array<!proto.bosdyn.api.mission.FailedNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, bosdyn_api_mission_mission_pb.FailedNode, 5));
};


/**
 * @param {!Array<!proto.bosdyn.api.mission.FailedNode>} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setFailedNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bosdyn.api.mission.FailedNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.mission.FailedNode}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.addFailedNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bosdyn.api.mission.FailedNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearFailedNodesList = function() {
  return this.setFailedNodesList([]);
};


/**
 * repeated ElementIdentifiers element_identifiers = 7;
 * @return {!Array<!proto.bosdyn.api.autowalk.ElementIdentifiers>}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getElementIdentifiersList = function() {
  return /** @type{!Array<!proto.bosdyn.api.autowalk.ElementIdentifiers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bosdyn.api.autowalk.ElementIdentifiers, 7));
};


/**
 * @param {!Array<!proto.bosdyn.api.autowalk.ElementIdentifiers>} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setElementIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.bosdyn.api.autowalk.ElementIdentifiers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.autowalk.ElementIdentifiers}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.addElementIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bosdyn.api.autowalk.ElementIdentifiers, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearElementIdentifiersList = function() {
  return this.setElementIdentifiersList([]);
};


/**
 * map<int32, FailedElement> failed_elements = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.bosdyn.api.autowalk.FailedElement>}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getFailedElementsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.bosdyn.api.autowalk.FailedElement>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.bosdyn.api.autowalk.FailedElement));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearFailedElementsMap = function() {
  this.getFailedElementsMap().clear();
  return this;};


/**
 * optional int64 mission_id = 9;
 * @return {number}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getMissionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setMissionId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional NodeIdentifier docking_node = 10;
 * @return {?proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getDockingNode = function() {
  return /** @type{?proto.bosdyn.api.autowalk.NodeIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.autowalk.NodeIdentifier, 10));
};


/**
 * @param {?proto.bosdyn.api.autowalk.NodeIdentifier|undefined} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setDockingNode = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearDockingNode = function() {
  return this.setDockingNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.hasDockingNode = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NodeIdentifier loop_node = 11;
 * @return {?proto.bosdyn.api.autowalk.NodeIdentifier}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.getLoopNode = function() {
  return /** @type{?proto.bosdyn.api.autowalk.NodeIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.autowalk.NodeIdentifier, 11));
};


/**
 * @param {?proto.bosdyn.api.autowalk.NodeIdentifier|undefined} value
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
*/
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.setLoopNode = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.autowalk.LoadAutowalkResponse} returns this
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.clearLoopNode = function() {
  return this.setLoopNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.autowalk.LoadAutowalkResponse.prototype.hasLoopNode = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.bosdyn.api.autowalk);
