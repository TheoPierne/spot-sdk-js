// source: bosdyn/api/image_geometry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.bosdyn.api.AreaI', null, global);
goog.exportSymbol('proto.bosdyn.api.AreaI.GeometryCase', null, global);
goog.exportSymbol('proto.bosdyn.api.RectangleI', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.RectangleI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.RectangleI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.RectangleI.displayName = 'proto.bosdyn.api.RectangleI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.AreaI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bosdyn.api.AreaI.oneofGroups_);
};
goog.inherits(proto.bosdyn.api.AreaI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.AreaI.displayName = 'proto.bosdyn.api.AreaI';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.RectangleI.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.RectangleI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.RectangleI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RectangleI.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 5, 0),
    y: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cols: jspb.Message.getFieldWithDefault(msg, 7, 0),
    rows: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.RectangleI}
 */
proto.bosdyn.api.RectangleI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.RectangleI;
  return proto.bosdyn.api.RectangleI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.RectangleI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.RectangleI}
 */
proto.bosdyn.api.RectangleI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCols(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.RectangleI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.RectangleI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.RectangleI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RectangleI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCols();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getRows();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 x = 5;
 * @return {number}
 */
proto.bosdyn.api.RectangleI.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.RectangleI} returns this
 */
proto.bosdyn.api.RectangleI.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 y = 6;
 * @return {number}
 */
proto.bosdyn.api.RectangleI.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.RectangleI} returns this
 */
proto.bosdyn.api.RectangleI.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 cols = 7;
 * @return {number}
 */
proto.bosdyn.api.RectangleI.prototype.getCols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.RectangleI} returns this
 */
proto.bosdyn.api.RectangleI.prototype.setCols = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 rows = 8;
 * @return {number}
 */
proto.bosdyn.api.RectangleI.prototype.getRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.RectangleI} returns this
 */
proto.bosdyn.api.RectangleI.prototype.setRows = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bosdyn.api.AreaI.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.bosdyn.api.AreaI.GeometryCase = {
  GEOMETRY_NOT_SET: 0,
  RECTANGLE: 1
};

/**
 * @return {proto.bosdyn.api.AreaI.GeometryCase}
 */
proto.bosdyn.api.AreaI.prototype.getGeometryCase = function() {
  return /** @type {proto.bosdyn.api.AreaI.GeometryCase} */(jspb.Message.computeOneofCase(this, proto.bosdyn.api.AreaI.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.AreaI.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.AreaI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.AreaI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.AreaI.toObject = function(includeInstance, msg) {
  var f, obj = {
    rectangle: (f = msg.getRectangle()) && proto.bosdyn.api.RectangleI.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.AreaI}
 */
proto.bosdyn.api.AreaI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.AreaI;
  return proto.bosdyn.api.AreaI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.AreaI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.AreaI}
 */
proto.bosdyn.api.AreaI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bosdyn.api.RectangleI;
      reader.readMessage(value,proto.bosdyn.api.RectangleI.deserializeBinaryFromReader);
      msg.setRectangle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.AreaI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.AreaI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.AreaI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.AreaI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRectangle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bosdyn.api.RectangleI.serializeBinaryToWriter
    );
  }
};


/**
 * optional RectangleI rectangle = 1;
 * @return {?proto.bosdyn.api.RectangleI}
 */
proto.bosdyn.api.AreaI.prototype.getRectangle = function() {
  return /** @type{?proto.bosdyn.api.RectangleI} */ (
    jspb.Message.getWrapperField(this, proto.bosdyn.api.RectangleI, 1));
};


/**
 * @param {?proto.bosdyn.api.RectangleI|undefined} value
 * @return {!proto.bosdyn.api.AreaI} returns this
*/
proto.bosdyn.api.AreaI.prototype.setRectangle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bosdyn.api.AreaI.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.AreaI} returns this
 */
proto.bosdyn.api.AreaI.prototype.clearRectangle = function() {
  return this.setRectangle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.AreaI.prototype.hasRectangle = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.bosdyn.api);
