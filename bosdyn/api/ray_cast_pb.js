// source: bosdyn/api/ray_cast.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bosdyn_api_header_pb = require('../../bosdyn/api/header_pb.js');
goog.object.extend(proto, bosdyn_api_header_pb);
var bosdyn_api_geometry_pb = require('../../bosdyn/api/geometry_pb.js');
goog.object.extend(proto, bosdyn_api_geometry_pb);
goog.exportSymbol('proto.bosdyn.api.RayIntersection', null, global);
goog.exportSymbol('proto.bosdyn.api.RayIntersection.Type', null, global);
goog.exportSymbol('proto.bosdyn.api.RaycastRequest', null, global);
goog.exportSymbol('proto.bosdyn.api.RaycastResponse', null, global);
goog.exportSymbol('proto.bosdyn.api.RaycastResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.RaycastRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.RaycastRequest.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.RaycastRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.RaycastRequest.displayName = 'proto.bosdyn.api.RaycastRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.RayIntersection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bosdyn.api.RayIntersection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.RayIntersection.displayName = 'proto.bosdyn.api.RayIntersection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bosdyn.api.RaycastResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bosdyn.api.RaycastResponse.repeatedFields_, null);
};
goog.inherits(proto.bosdyn.api.RaycastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bosdyn.api.RaycastResponse.displayName = 'proto.bosdyn.api.RaycastResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.RaycastRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.RaycastRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.RaycastRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.RaycastRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RaycastRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.RequestHeader.toObject(includeInstance, f),
    rayFrameName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ray: (f = msg.getRay()) && bosdyn_api_geometry_pb.Ray.toObject(includeInstance, f),
    minIntersectionDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    intersectionTypesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.RaycastRequest}
 */
proto.bosdyn.api.RaycastRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.RaycastRequest;
  return proto.bosdyn.api.RaycastRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.RaycastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.RaycastRequest}
 */
proto.bosdyn.api.RaycastRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.RequestHeader;
      reader.readMessage(value,bosdyn_api_header_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRayFrameName(value);
      break;
    case 2:
      var value = new bosdyn_api_geometry_pb.Ray;
      reader.readMessage(value,bosdyn_api_geometry_pb.Ray.deserializeBinaryFromReader);
      msg.setRay(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinIntersectionDistance(value);
      break;
    case 7:
      var values = /** @type {!Array<!proto.bosdyn.api.RayIntersection.Type>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIntersectionTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.RaycastRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.RaycastRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.RaycastRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RaycastRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getRayFrameName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRay();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_geometry_pb.Ray.serializeBinaryToWriter
    );
  }
  f = message.getMinIntersectionDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getIntersectionTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.bosdyn.api.RequestHeader}
 */
proto.bosdyn.api.RaycastRequest.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.RequestHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.RequestHeader|undefined} value
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
*/
proto.bosdyn.api.RaycastRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.RaycastRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ray_frame_name = 5;
 * @return {string}
 */
proto.bosdyn.api.RaycastRequest.prototype.getRayFrameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.setRayFrameName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Ray ray = 2;
 * @return {?proto.bosdyn.api.Ray}
 */
proto.bosdyn.api.RaycastRequest.prototype.getRay = function() {
  return /** @type{?proto.bosdyn.api.Ray} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Ray, 2));
};


/**
 * @param {?proto.bosdyn.api.Ray|undefined} value
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
*/
proto.bosdyn.api.RaycastRequest.prototype.setRay = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.clearRay = function() {
  return this.setRay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.RaycastRequest.prototype.hasRay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float min_intersection_distance = 4;
 * @return {number}
 */
proto.bosdyn.api.RaycastRequest.prototype.getMinIntersectionDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.setMinIntersectionDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated RayIntersection.Type intersection_types = 7;
 * @return {!Array<!proto.bosdyn.api.RayIntersection.Type>}
 */
proto.bosdyn.api.RaycastRequest.prototype.getIntersectionTypesList = function() {
  return /** @type {!Array<!proto.bosdyn.api.RayIntersection.Type>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.bosdyn.api.RayIntersection.Type>} value
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.setIntersectionTypesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.bosdyn.api.RayIntersection.Type} value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.addIntersectionTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.RaycastRequest} returns this
 */
proto.bosdyn.api.RaycastRequest.prototype.clearIntersectionTypesList = function() {
  return this.setIntersectionTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.RayIntersection.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.RayIntersection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.RayIntersection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RayIntersection.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hitPositionInHitFrame: (f = msg.getHitPositionInHitFrame()) && bosdyn_api_geometry_pb.Vec3.toObject(includeInstance, f),
    distanceMeters: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.RayIntersection}
 */
proto.bosdyn.api.RayIntersection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.RayIntersection;
  return proto.bosdyn.api.RayIntersection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.RayIntersection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.RayIntersection}
 */
proto.bosdyn.api.RayIntersection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bosdyn.api.RayIntersection.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new bosdyn_api_geometry_pb.Vec3;
      reader.readMessage(value,bosdyn_api_geometry_pb.Vec3.deserializeBinaryFromReader);
      msg.setHitPositionInHitFrame(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.RayIntersection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.RayIntersection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.RayIntersection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RayIntersection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHitPositionInHitFrame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bosdyn_api_geometry_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getDistanceMeters();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.RayIntersection.Type = {
  TYPE_UNKNOWN: 0,
  TYPE_GROUND_PLANE: 1,
  TYPE_TERRAIN_MAP: 2,
  TYPE_VOXEL_MAP: 3,
  TYPE_HAND_DEPTH: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.bosdyn.api.RayIntersection.Type}
 */
proto.bosdyn.api.RayIntersection.prototype.getType = function() {
  return /** @type {!proto.bosdyn.api.RayIntersection.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bosdyn.api.RayIntersection.Type} value
 * @return {!proto.bosdyn.api.RayIntersection} returns this
 */
proto.bosdyn.api.RayIntersection.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Vec3 hit_position_in_hit_frame = 2;
 * @return {?proto.bosdyn.api.Vec3}
 */
proto.bosdyn.api.RayIntersection.prototype.getHitPositionInHitFrame = function() {
  return /** @type{?proto.bosdyn.api.Vec3} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.Vec3, 2));
};


/**
 * @param {?proto.bosdyn.api.Vec3|undefined} value
 * @return {!proto.bosdyn.api.RayIntersection} returns this
*/
proto.bosdyn.api.RayIntersection.prototype.setHitPositionInHitFrame = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.RayIntersection} returns this
 */
proto.bosdyn.api.RayIntersection.prototype.clearHitPositionInHitFrame = function() {
  return this.setHitPositionInHitFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.RayIntersection.prototype.hasHitPositionInHitFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double distance_meters = 3;
 * @return {number}
 */
proto.bosdyn.api.RayIntersection.prototype.getDistanceMeters = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bosdyn.api.RayIntersection} returns this
 */
proto.bosdyn.api.RayIntersection.prototype.setDistanceMeters = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bosdyn.api.RaycastResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bosdyn.api.RaycastResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bosdyn.api.RaycastResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bosdyn.api.RaycastResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RaycastResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && bosdyn_api_header_pb.ResponseHeader.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    message: jspb.Message.getFieldWithDefault(msg, 6, ""),
    hitFrameName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hitsList: jspb.Message.toObjectList(msg.getHitsList(),
    proto.bosdyn.api.RayIntersection.toObject, includeInstance),
    transformsSnapshot: (f = msg.getTransformsSnapshot()) && bosdyn_api_geometry_pb.FrameTreeSnapshot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bosdyn.api.RaycastResponse}
 */
proto.bosdyn.api.RaycastResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bosdyn.api.RaycastResponse;
  return proto.bosdyn.api.RaycastResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bosdyn.api.RaycastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bosdyn.api.RaycastResponse}
 */
proto.bosdyn.api.RaycastResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bosdyn_api_header_pb.ResponseHeader;
      reader.readMessage(value,bosdyn_api_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 5:
      var value = /** @type {!proto.bosdyn.api.RaycastResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHitFrameName(value);
      break;
    case 2:
      var value = new proto.bosdyn.api.RayIntersection;
      reader.readMessage(value,proto.bosdyn.api.RayIntersection.deserializeBinaryFromReader);
      msg.addHits(value);
      break;
    case 4:
      var value = new bosdyn_api_geometry_pb.FrameTreeSnapshot;
      reader.readMessage(value,bosdyn_api_geometry_pb.FrameTreeSnapshot.deserializeBinaryFromReader);
      msg.setTransformsSnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bosdyn.api.RaycastResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bosdyn.api.RaycastResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bosdyn.api.RaycastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bosdyn.api.RaycastResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bosdyn_api_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHitFrameName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bosdyn.api.RayIntersection.serializeBinaryToWriter
    );
  }
  f = message.getTransformsSnapshot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      bosdyn_api_geometry_pb.FrameTreeSnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bosdyn.api.RaycastResponse.Status = {
  STATUS_UNKNOWN: 0,
  STATUS_OK: 1,
  STATUS_INVALID_REQUEST: 2,
  STATUS_INVALID_INTERSECTION_TYPE: 3,
  STATUS_UNKNOWN_FRAME: 4
};

/**
 * optional ResponseHeader header = 1;
 * @return {?proto.bosdyn.api.ResponseHeader}
 */
proto.bosdyn.api.RaycastResponse.prototype.getHeader = function() {
  return /** @type{?proto.bosdyn.api.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_header_pb.ResponseHeader, 1));
};


/**
 * @param {?proto.bosdyn.api.ResponseHeader|undefined} value
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
*/
proto.bosdyn.api.RaycastResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
 */
proto.bosdyn.api.RaycastResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.RaycastResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 5;
 * @return {!proto.bosdyn.api.RaycastResponse.Status}
 */
proto.bosdyn.api.RaycastResponse.prototype.getStatus = function() {
  return /** @type {!proto.bosdyn.api.RaycastResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.bosdyn.api.RaycastResponse.Status} value
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
 */
proto.bosdyn.api.RaycastResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string message = 6;
 * @return {string}
 */
proto.bosdyn.api.RaycastResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
 */
proto.bosdyn.api.RaycastResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string hit_frame_name = 3;
 * @return {string}
 */
proto.bosdyn.api.RaycastResponse.prototype.getHitFrameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
 */
proto.bosdyn.api.RaycastResponse.prototype.setHitFrameName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated RayIntersection hits = 2;
 * @return {!Array<!proto.bosdyn.api.RayIntersection>}
 */
proto.bosdyn.api.RaycastResponse.prototype.getHitsList = function() {
  return /** @type{!Array<!proto.bosdyn.api.RayIntersection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bosdyn.api.RayIntersection, 2));
};


/**
 * @param {!Array<!proto.bosdyn.api.RayIntersection>} value
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
*/
proto.bosdyn.api.RaycastResponse.prototype.setHitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bosdyn.api.RayIntersection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bosdyn.api.RayIntersection}
 */
proto.bosdyn.api.RaycastResponse.prototype.addHits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bosdyn.api.RayIntersection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
 */
proto.bosdyn.api.RaycastResponse.prototype.clearHitsList = function() {
  return this.setHitsList([]);
};


/**
 * optional FrameTreeSnapshot transforms_snapshot = 4;
 * @return {?proto.bosdyn.api.FrameTreeSnapshot}
 */
proto.bosdyn.api.RaycastResponse.prototype.getTransformsSnapshot = function() {
  return /** @type{?proto.bosdyn.api.FrameTreeSnapshot} */ (
    jspb.Message.getWrapperField(this, bosdyn_api_geometry_pb.FrameTreeSnapshot, 4));
};


/**
 * @param {?proto.bosdyn.api.FrameTreeSnapshot|undefined} value
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
*/
proto.bosdyn.api.RaycastResponse.prototype.setTransformsSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bosdyn.api.RaycastResponse} returns this
 */
proto.bosdyn.api.RaycastResponse.prototype.clearTransformsSnapshot = function() {
  return this.setTransformsSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bosdyn.api.RaycastResponse.prototype.hasTransformsSnapshot = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.bosdyn.api);
